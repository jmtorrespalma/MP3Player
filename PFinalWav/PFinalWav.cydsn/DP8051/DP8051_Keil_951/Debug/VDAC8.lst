C51 COMPILER V9.51   VDAC8                                                                 05/28/2014 14:54:41 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE VDAC8
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\VDAC8.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\VDAC8.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\VDAC8.lst) CD DB NOIP OT
                    -(2,SIZE) DF(DEBUG) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\VDAC8.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: VDAC8.c  
   3          * Version 1.90
   4          *
   5          * Description:
   6          *  This file provides the source code to the API for the 8-bit Voltage DAC 
   7          *  (VDAC8) User Module.
   8          *
   9          * Note:
  10          *  Any unusual or non-standard behavior should be noted here. Other-
  11          *  wise, this section should remain blank.
  12          *
  13          ********************************************************************************
  14          * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  15          * You may use this file only in accordance with the license, terms, conditions, 
  16          * disclaimers, and limitations in the end user license agreement accompanying 
  17          * the software package with which this file was provided.
  18          *******************************************************************************/
  19          
  20          #include "cytypes.h"
  21          #include "VDAC8.h"
  22          
  23          #if (CY_PSOC5A)
              #include <CyLib.h>
              #endif /* CY_PSOC5A */
  26          
  27          uint8 VDAC8_initVar = 0u;
  28          
  29          #if (CY_PSOC5A)
                  static uint8 VDAC8_restoreVal = 0u;
              #endif /* CY_PSOC5A */
  32          
  33          #if (CY_PSOC5A)
                  static VDAC8_backupStruct VDAC8_backup;
              #endif /* CY_PSOC5A */
  36          
  37          
  38          /*******************************************************************************
  39          * Function Name: VDAC8_Init
  40          ********************************************************************************
  41          * Summary:
  42          *  Initialize to the schematic state.
  43          * 
  44          * Parameters:
  45          *  void:
  46          *
  47          * Return:
  48          *  void
  49          *
  50          * Theory:
  51          *
  52          * Side Effects:
  53          *
C51 COMPILER V9.51   VDAC8                                                                 05/28/2014 14:54:41 PAGE 2   

  54          *******************************************************************************/
  55          void VDAC8_Init(void) 
  56          {
  57   1          VDAC8_CR0 = (VDAC8_MODE_V );
  58   1      
  59   1          /* Set default data source */
  60   1          #if(VDAC8_DEFAULT_DATA_SRC != 0 )
                      VDAC8_CR1 = (VDAC8_DEFAULT_CNTL | VDAC8_DACBUS_ENABLE) ;
                  #else
  63   1              VDAC8_CR1 = (VDAC8_DEFAULT_CNTL | VDAC8_DACBUS_DISABLE) ;
  64   1          #endif /* (VDAC8_DEFAULT_DATA_SRC != 0 ) */
  65   1      
  66   1          /* Set default strobe mode */
  67   1          #if(VDAC8_DEFAULT_STRB != 0)
                      VDAC8_Strobe |= VDAC8_STRB_EN ;
                  #endif/* (VDAC8_DEFAULT_STRB != 0) */
  70   1      
  71   1          /* Set default range */
  72   1          VDAC8_SetRange(VDAC8_DEFAULT_RANGE); 
  73   1      
  74   1          /* Set default speed */
  75   1          VDAC8_SetSpeed(VDAC8_DEFAULT_SPEED);
  76   1      }
  77          
  78          
  79          /*******************************************************************************
  80          * Function Name: VDAC8_Enable
  81          ********************************************************************************
  82          * Summary:
  83          *  Enable the VDAC8
  84          * 
  85          * Parameters:
  86          *  void
  87          *
  88          * Return:
  89          *  void
  90          *
  91          * Theory:
  92          *
  93          * Side Effects:
  94          *
  95          *******************************************************************************/
  96          void VDAC8_Enable(void) 
  97          {
  98   1          VDAC8_PWRMGR |= VDAC8_ACT_PWR_EN;
  99   1          VDAC8_STBY_PWRMGR |= VDAC8_STBY_PWR_EN;
 100   1      
 101   1          /*This is to restore the value of register CR0 ,
 102   1          which is modified  in Stop API , this prevents misbehaviour of VDAC */
 103   1          #if (CY_PSOC5A)
                      if(VDAC8_restoreVal == 1u) 
                      {
                           VDAC8_CR0 = VDAC8_backup.data_value;
                           VDAC8_restoreVal = 0u;
                      }
                  #endif /* CY_PSOC5A */
 110   1      }
 111          
 112          
 113          /*******************************************************************************
 114          * Function Name: VDAC8_Start
 115          ********************************************************************************
C51 COMPILER V9.51   VDAC8                                                                 05/28/2014 14:54:41 PAGE 3   

 116          *
 117          * Summary:
 118          *  The start function initializes the voltage DAC with the default values, 
 119          *  and sets the power to the given level.  A power level of 0, is the same as
 120          *  executing the stop function.
 121          *
 122          * Parameters:
 123          *  Power: Sets power level between off (0) and (3) high power
 124          *
 125          * Return:
 126          *  void 
 127          *
 128          * Global variables:
 129          *  VDAC8_initVar: Is modified when this function is called for the 
 130          *  first time. Is used to ensure that initialization happens only once.
 131          *
 132          *******************************************************************************/
 133          void VDAC8_Start(void)  
 134          {
 135   1          /* Hardware initiazation only needs to occure the first time */
 136   1          if(VDAC8_initVar == 0u)
 137   1          { 
 138   2              VDAC8_Init();
 139   2              VDAC8_initVar = 1u;
 140   2          }
 141   1      
 142   1          /* Enable power to DAC */
 143   1          VDAC8_Enable();
 144   1      
 145   1          /* Set default value */
 146   1          VDAC8_SetValue(VDAC8_DEFAULT_DATA); 
 147   1      }
 148          
 149          
 150          /*******************************************************************************
 151          * Function Name: VDAC8_Stop
 152          ********************************************************************************
 153          *
 154          * Summary:
 155          *  Powers down DAC to lowest power state.
 156          *
 157          * Parameters:
 158          *  void
 159          *
 160          * Return:
 161          *  void
 162          *
 163          * Theory:
 164          *
 165          * Side Effects:
 166          *
 167          *******************************************************************************/
 168          void VDAC8_Stop(void) 
 169          {
 170   1          /* Disble power to DAC */
 171   1          VDAC8_PWRMGR &= (uint8)(~VDAC8_ACT_PWR_EN);
 172   1          VDAC8_STBY_PWRMGR &= (uint8)(~VDAC8_STBY_PWR_EN);
 173   1      
 174   1          /* This is a work around for PSoC5A  ,
 175   1          this sets VDAC to current mode with output off */
 176   1          #if (CY_PSOC5A)
                      VDAC8_backup.data_value = VDAC8_CR0;
C51 COMPILER V9.51   VDAC8                                                                 05/28/2014 14:54:41 PAGE 4   

                      VDAC8_CR0 = VDAC8_CUR_MODE_OUT_OFF;
                      VDAC8_restoreVal = 1u;
                  #endif /* CY_PSOC5A */
 181   1      }
 182          
 183          
 184          /*******************************************************************************
 185          * Function Name: VDAC8_SetSpeed
 186          ********************************************************************************
 187          *
 188          * Summary:
 189          *  Set DAC speed
 190          *
 191          * Parameters:
 192          *  power: Sets speed value
 193          *
 194          * Return:
 195          *  void
 196          *
 197          * Theory:
 198          *
 199          * Side Effects:
 200          *
 201          *******************************************************************************/
 202          void VDAC8_SetSpeed(uint8 speed) 
 203          {
 204   1          /* Clear power mask then write in new value */
 205   1          VDAC8_CR0 &= (uint8)(~VDAC8_HS_MASK);
 206   1          VDAC8_CR0 |=  (speed & VDAC8_HS_MASK);
 207   1      }
 208          
 209          
 210          /*******************************************************************************
 211          * Function Name: VDAC8_SetRange
 212          ********************************************************************************
 213          *
 214          * Summary:
 215          *  Set one of three current ranges.
 216          *
 217          * Parameters:
 218          *  Range: Sets one of Three valid ranges.
 219          *
 220          * Return:
 221          *  void 
 222          *
 223          * Theory:
 224          *
 225          * Side Effects:
 226          *
 227          *******************************************************************************/
 228          void VDAC8_SetRange(uint8 range) 
 229          {
 230   1          VDAC8_CR0 &= (uint8)(~VDAC8_RANGE_MASK);      /* Clear existing mode */
 231   1          VDAC8_CR0 |= (range & VDAC8_RANGE_MASK);      /*  Set Range  */
 232   1          VDAC8_DacTrim();
 233   1      }
 234          
 235          
 236          /*******************************************************************************
 237          * Function Name: VDAC8_SetValue
 238          ********************************************************************************
 239          *
C51 COMPILER V9.51   VDAC8                                                                 05/28/2014 14:54:41 PAGE 5   

 240          * Summary:
 241          *  Set 8-bit DAC value
 242          *
 243          * Parameters:  
 244          *  value:  Sets DAC value between 0 and 255.
 245          *
 246          * Return: 
 247          *  void 
 248          *
 249          * Theory: 
 250          *
 251          * Side Effects:
 252          *
 253          *******************************************************************************/
 254          void VDAC8_SetValue(uint8 value) 
 255          {
 256   1          #if (CY_PSOC5A)
                      uint8 VDAC8_intrStatus = CyEnterCriticalSection();
                  #endif /* CY_PSOC5A */
 259   1      
 260   1          VDAC8_Data = value;                /*  Set Value  */
 261   1      
 262   1          /* PSOC5A requires a double write */
 263   1          /* Exit Critical Section */
 264   1          #if (CY_PSOC5A)
                      VDAC8_Data = value;
                      CyExitCriticalSection(VDAC8_intrStatus);
                  #endif /* CY_PSOC5A */
 268   1      }
 269          
 270          
 271          /*******************************************************************************
 272          * Function Name: VDAC8_DacTrim
 273          ********************************************************************************
 274          *
 275          * Summary:
 276          *  Set the trim value for the given range.
 277          *
 278          * Parameters:
 279          *  range:  1V or 4V range.  See constants.
 280          *
 281          * Return:
 282          *  void
 283          *
 284          * Theory: 
 285          *
 286          * Side Effects:
 287          *
 288          *******************************************************************************/
 289          void VDAC8_DacTrim(void) 
 290          {
 291   1          uint8 mode;
 292   1      
 293   1          mode = (uint8)((VDAC8_CR0 & VDAC8_RANGE_MASK) >> 2) + VDAC8_TRIM_M7_1V_RNG_OFFSET;
 294   1          VDAC8_TR = CY_GET_XTND_REG8((uint8 *)(VDAC8_DAC_TRIM_BASE + mode));
 295   1      }
 296          
 297          
 298          /* [] END OF FILE */
C51 COMPILER V9.51   VDAC8                                                                 05/28/2014 14:54:41 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION VDAC8_Init (BEGIN)
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 56
                                           ; SOURCE LINE # 57
0000 905820            MOV     DPTR,#05820H
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 63
0005 905821            MOV     DPTR,#05821H
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 72
000A 7F04              MOV     R7,#04H
000C 120000      R     LCALL   _VDAC8_SetRange
                                           ; SOURCE LINE # 75
000F 7F00              MOV     R7,#00H
0011 120000      R     LCALL   _VDAC8_SetSpeed
                                           ; SOURCE LINE # 76
0014 22                RET     
             ; FUNCTION VDAC8_Init (END)

             ; FUNCTION VDAC8_Enable (BEGIN)
                                           ; SOURCE LINE # 96
                                           ; SOURCE LINE # 97
                                           ; SOURCE LINE # 98
0000 9043A8            MOV     DPTR,#043A8H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4401              ORL     A,#01H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 99
000B 9043B8            MOV     DPTR,#043B8H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 4401              ORL     A,#01H
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 110
0016 22                RET     
             ; FUNCTION VDAC8_Enable (END)

             ; FUNCTION VDAC8_Start (BEGIN)
                                           ; SOURCE LINE # 133
                                           ; SOURCE LINE # 134
                                           ; SOURCE LINE # 136
0000 900000      R     MOV     DPTR,#VDAC8_initVar
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 7009              JNZ     ?C0003
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 138
0008 120000      R     LCALL   VDAC8_Init
                                           ; SOURCE LINE # 139
C51 COMPILER V9.51   VDAC8                                                                 05/28/2014 14:54:41 PAGE 7   

000B 900000      R     MOV     DPTR,#VDAC8_initVar
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 140
0011         ?C0003:
                                           ; SOURCE LINE # 143
0011 120000      R     LCALL   VDAC8_Enable
                                           ; SOURCE LINE # 146
0014 7F00              MOV     R7,#00H
0016 120000      R     LCALL   _VDAC8_SetValue
                                           ; SOURCE LINE # 147
0019 22                RET     
             ; FUNCTION VDAC8_Start (END)

             ; FUNCTION VDAC8_Stop (BEGIN)
                                           ; SOURCE LINE # 168
                                           ; SOURCE LINE # 169
                                           ; SOURCE LINE # 171
0000 9043A8            MOV     DPTR,#043A8H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FE              ANL     A,#0FEH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 172
000B 9043B8            MOV     DPTR,#043B8H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 54FE              ANL     A,#0FEH
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 181
0016 22                RET     
             ; FUNCTION VDAC8_Stop (END)

             ; FUNCTION _VDAC8_SetSpeed (BEGIN)
                                           ; SOURCE LINE # 202
0000 900000      R     MOV     DPTR,#speed
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 203
                                           ; SOURCE LINE # 205
0005 905820            MOV     DPTR,#05820H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 54FD              ANL     A,#0FDH
000D FF                MOV     R7,A
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 206
0010 905820            MOV     DPTR,#05820H
0013 C083              PUSH    DPH
0015 C082              PUSH    DPL
0017 E0                MOVX    A,@DPTR
0018 FF                MOV     R7,A
0019 900000      R     MOV     DPTR,#speed
001C E0                MOVX    A,@DPTR
C51 COMPILER V9.51   VDAC8                                                                 05/28/2014 14:54:41 PAGE 8   

001D FE                MOV     R6,A
001E EE                MOV     A,R6
001F 5402              ANL     A,#02H
0021 FE                MOV     R6,A
0022 EF                MOV     A,R7
0023 4E                ORL     A,R6
0024 FF                MOV     R7,A
0025 D082              POP     DPL
0027 D083              POP     DPH
0029 EF                MOV     A,R7
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 207
002B 22                RET     
             ; FUNCTION _VDAC8_SetSpeed (END)

             ; FUNCTION _VDAC8_SetRange (BEGIN)
                                           ; SOURCE LINE # 228
0000 900000      R     MOV     DPTR,#range
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 229
                                           ; SOURCE LINE # 230
0005 905820            MOV     DPTR,#05820H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 54F3              ANL     A,#0F3H
000D FF                MOV     R7,A
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 231
0010 905820            MOV     DPTR,#05820H
0013 C083              PUSH    DPH
0015 C082              PUSH    DPL
0017 E0                MOVX    A,@DPTR
0018 FF                MOV     R7,A
0019 900000      R     MOV     DPTR,#range
001C E0                MOVX    A,@DPTR
001D FE                MOV     R6,A
001E EE                MOV     A,R6
001F 540C              ANL     A,#0CH
0021 FE                MOV     R6,A
0022 EF                MOV     A,R7
0023 4E                ORL     A,R6
0024 FF                MOV     R7,A
0025 D082              POP     DPL
0027 D083              POP     DPH
0029 EF                MOV     A,R7
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 232
002B 120000      R     LCALL   VDAC8_DacTrim
                                           ; SOURCE LINE # 233
002E 22                RET     
             ; FUNCTION _VDAC8_SetRange (END)

             ; FUNCTION _VDAC8_SetValue (BEGIN)
                                           ; SOURCE LINE # 254
0000 900000      R     MOV     DPTR,#value
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 255
                                           ; SOURCE LINE # 260
C51 COMPILER V9.51   VDAC8                                                                 05/28/2014 14:54:41 PAGE 9   

0005 900000      R     MOV     DPTR,#value
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 905B80            MOV     DPTR,#05B80H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 268
000F 22                RET     
             ; FUNCTION _VDAC8_SetValue (END)

             ; FUNCTION VDAC8_DacTrim (BEGIN)
                                           ; SOURCE LINE # 289
                                           ; SOURCE LINE # 290
                                           ; SOURCE LINE # 293
0000 905820            MOV     DPTR,#05820H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 540C              ANL     A,#0CH
0008 FF                MOV     R7,A
0009 7E00              MOV     R6,#00H
000B EF                MOV     A,R7
000C 7802              MOV     R0,#02H
000E         ?C0010:
000E CE                XCH     A,R6
000F C3                CLR     C
0010 13                RRC     A
0011 CE                XCH     A,R6
0012 13                RRC     A
0013 D8F9              DJNZ    R0,?C0010
0015 FF                MOV     R7,A
0016 EF                MOV     A,R7
0017 2406              ADD     A,#06H
0019 FF                MOV     R7,A
001A 900000      R     MOV     DPTR,#mode
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 294
001F 900000      R     MOV     DPTR,#mode
0022 E0                MOVX    A,@DPTR
0023 FF                MOV     R7,A
0024 E4                CLR     A
0025 FC                MOV     R4,A
0026 FD                MOV     R5,A
0027 FE                MOV     R6,A
0028 EF                MOV     A,R7
0029 2420              ADD     A,#020H
002B FF                MOV     R7,A
002C EE                MOV     A,R6
002D 3401              ADDC    A,#01H
002F FE                MOV     R6,A
0030 ED                MOV     A,R5
0031 340C              ADDC    A,#0CH
0033 FD                MOV     R5,A
0034 EC                MOV     A,R4
0035 3400              ADDC    A,#00H
0037 FC                MOV     R4,A
0038 A907              MOV     R1,AR7
003A AA06              MOV     R2,AR6
003C AB05              MOV     R3,AR5
003E 120000      E     LCALL   _cyread8
0041 904608            MOV     DPTR,#04608H
C51 COMPILER V9.51   VDAC8                                                                 05/28/2014 14:54:41 PAGE 10  

0044 EF                MOV     A,R7
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 295
0046 22                RET     
             ; FUNCTION VDAC8_DacTrim (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    271    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
